security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: 'App\Entity\User'
                property: 'email'
    firewalls:

        login:
            # endpoint du login pour l'API v1
            pattern: ^/api/login
            stateless: true
            # endpoint pour la vérification du login
            json_login:
                check_path: /api/login_check
                # config spécifique à LexikJwt pour connecter l'utilisateur
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api/
            stateless: true
            # on utilise l'authentification JWT
            jwt: ~
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
            # logout
            

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/back/.+/[^/]+/delete, roles: ROLE_ADMIN },
        - { path: ^/api/back, roles: ROLE_MANAGER }
        # - { path: ^/profile, roles: ROLE_USER }

        # API
        - { path: ^/api/back/.+/[^/]+/delete, roles: ROLE_ADMIN }
        - { path: ^/api/back, roles: ROLE_MANAGER }
        - { path: ^/api/back/.+/[^/]+/certify, roles: ROLE_MANAGER }
        - { path: ^/api/front/cases|profils|proposals|report, roles: [ROLE_CERTIFIED_USER, ROLE_USER] }
        
        
        
    role_hierarchy:
        # l'admin hérite du rôle manager
        ROLE_ADMIN:       ROLE_MANAGER
        ROLE_MANAGER:     ROLE_CERTIFIED_USER
        ROLE_CERTIED_USER: ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon